{"mappings":"qlGAiJO,SAASA,EAATC,GAIgB,IAJOC,SAC5BA,EAD4BC,SAE5BA,EAF4BC,OAG5BA,GAH4BH,EAKxBI,GAAaC,cACS,MAAtBD,EAAWE,UACbF,EAAWE,SAAUC,0BAAqB,C,OAAEJ,KAG9C,IAAIK,EAAUJ,EAAWE,SACpBG,EAAOC,IAAYL,cAAe,CACrCM,OAAQH,EAAQG,OAChBC,SAAUJ,EAAQI,WAKpB,OAFAP,sBAAsB,IAAMG,EAAQK,OAAOH,IAAW,CAACF,KAGrDM,mBAACC,EAAAC,OADH,CAEIf,SAAUA,EACVC,SAAUA,EACVU,SAAUH,EAAMG,SAChBK,eAAgBR,EAAME,OACtBO,UAAWV,G,CAeV,SAASW,EAATC,GAAqE,IAAjDnB,SAAEA,EAAFC,SAAYA,EAAZC,OAAsBA,GAAtBiB,EACrBhB,GAAaC,cACS,MAAtBD,EAAWE,UACbF,EAAWE,SAAUe,uBAAkB,C,OAAElB,KAG3C,IAAIK,EAAUJ,EAAWE,SACpBG,EAAOC,IAAYL,cAAe,CACrCM,OAAQH,EAAQG,OAChBC,SAAUJ,EAAQI,WAKpB,OAFAP,sBAAsB,IAAMG,EAAQK,OAAOH,IAAW,CAACF,KAGrDM,mBAACC,EAAAC,OADH,CAEIf,SAAUA,EACVC,SAAUA,EACVU,SAAUH,EAAMG,SAChBK,eAAgBR,EAAME,OACtBO,UAAWV,G,CAiBjB,SAASc,EAATC,GAA4E,IAArDtB,SAAEA,EAAFC,SAAYA,EAAZM,QAAsBA,GAAtBe,EACrB,MAAOd,EAAOC,IAAYL,cAAe,CACvCM,OAAQH,EAAQG,OAChBC,SAAUJ,EAAQI,WAKpB,OAFAP,sBAAsB,IAAMG,EAAQK,OAAOH,IAAW,CAACF,KAGrDM,mBAACC,EAAAC,OADH,CAEIf,SAAUA,EACVC,SAAUA,EACVU,SAAUH,EAAMG,SAChBK,eAAgBR,EAAME,OACtBO,UAAWV,G,CA0BJgB,SAAOnB,iBAClB,SAAAoB,EAEEC,GACA,IAFAC,QAAEA,EAAFC,eAAWA,EAAXC,QAA2BA,GAAU,EAArCpB,MAA4CA,EAA5CqB,OAAmDA,EAAnDC,GAA2DA,GAA3DN,EAAkEO,EAElEC,EAAAR,EAAAS,GACIC,GAAOC,aAAQL,GACfM,EAAkBC,EAAoBP,EAAI,C,QAAEF,E,MAASpB,E,OAAOqB,IAUhE,OAEE,EAAAS,EAAAC,eAAA,IAAAC,EAAA,GACMT,EADN,CAEEG,KAAMA,EACNR,QAdJ,SACEe,GAEIf,GAASA,EAAQe,GAChBA,EAAMC,kBAAqBf,GAC9BS,EAAgBK,E,EAUhBhB,IAAKA,EACLI,OAAQA,I,IA0BHc,GAAUvC,iBACrB,SAAAwC,EAWEnB,GACA,IAVE,eAAgBoB,EAAkB,OADpCC,cAEEA,GAAgB,EAChBC,UAAWC,EAAgB,GAH7BC,IAIEA,GAAM,EACNC,MAAOC,EALTrB,GAMEA,EANF7B,SAOEA,GAPF2C,EAQKb,EAGLC,EAAAY,EAAAQ,GACIzC,GAAW0C,mBACXC,GAAOC,qBAAgBzB,GAEvB0B,EAAmB7C,EAAS8C,SAC5BC,EAAaJ,EAAKG,SACjBX,IACHU,EAAmBA,EAAiBG,cACpCD,EAAaA,EAAWC,eAG1B,IAQIZ,EARAa,EACFJ,IAAqBE,IACnBT,GACAO,EAAiBK,WAAWH,IACmB,MAA/CF,EAAiBM,OAAOJ,EAAWK,QAEnCC,EAAcJ,EAAWf,OAAkBoB,EAI7ClB,EAD2B,mBAAlBC,EACGA,EAAc,C,SAAEY,IAOhB,CAACZ,EAAeY,EAAW,SAAW,MAC/CM,OAAOC,SACPC,KAAK,KAGV,IAAIlB,EACmB,mBAAdC,EAA2BA,EAAU,C,SAAES,IAAcT,EAE9D,OACEtC,mBAACwD,EAAD7B,EAAA,GACMT,EAFR,CAGI,eAAciC,EACdjB,UAAWA,EACXtB,IAAKA,EACLyB,MAAOA,EACPpB,GAAIA,IAEiB,mBAAb7B,EAA0BA,EAAS,C,SAAE2D,IAAc3D,E,IAmB5D,SAASoC,EACdP,EADKwC,GAW6C,IATlDzC,OACEA,EACAD,QAAS2C,EAFX/D,MAGEA,QAMgD,IAAA8D,EAD9C,GARJA,EAUIE,GAAWC,mBACX9D,GAAW0C,mBACXC,GAAOC,qBAAgBzB,GAE3B,OAAO1B,kBACJqC,IACC,KACmB,IAAjBA,EAAMiC,QACJ7C,GAAqB,UAAXA,GAjKpB,SAAyBY,GACvB,SAAUA,EAAMkC,SAAWlC,EAAMmC,QAAUnC,EAAMoC,SAAWpC,EAAMqC,S,CAiK3DC,CAAgBtC,IACjB,CACAA,EAAMuC,iBAIN,IAAIpD,IACA2C,IAAeU,gBAAWtE,MAAcsE,gBAAW3B,GAEvDkB,EAAS1C,EAAI,C,QAAEF,E,MAASpB,G,IAG5B,CAACG,EAAU6D,EAAUlB,EAAMiB,EAAa/D,EAAOqB,EAAQC,G,CAQpD,SAASoD,EAAgBC,GAa9B,IAAIC,GAAyBhF,YAAaiF,EAAmBF,IAEzDxE,GAAW0C,mBACXiC,GAAelF,cAAc,KAC/B,IAAIkF,EAAeD,EAAmB1E,EAAS4E,QAE/C,IAAK,IAAIC,KAAOJ,EAAuB/E,QAAQoF,OACxCH,EAAaI,IAAIF,IACpBJ,EAAuB/E,QAAQsF,OAAOH,GAAKI,SAASC,IAClDP,EAAaQ,OAAON,EAAKK,EAAzBP,IAKN,OAAOA,CAAP,GACC,CAAC3E,EAAS4E,SAETf,GAAWC,mBAWf,MAAO,CAACa,GAVclF,kBACpB,CACE2F,EACAC,KAEAxB,EAAS,IAAMa,EAAmBU,GAAWC,EAA7C,GAEF,CAACxB,I,CAmCE,SAASa,EACdY,GAEA,YADiB,IADjBA,MAA4B,IAErB,IAAIC,gBACO,iBAATD,GACPE,MAAMC,QAAQH,IACdA,aAAgBC,gBACZD,EACAI,OAAOZ,KAAKQ,GAAMK,QAAO,CAACC,EAAMf,KAC9B,IAAIK,EAAQI,EAAKT,GACjB,OAAOe,EAAKC,OACVL,MAAMC,QAAQP,GAASA,EAAMY,KAAKC,GAAM,CAAClB,EAAKkB,KAAM,CAAC,CAAClB,EAAKK,IAD7D,GAGC,I,urLClgBI,SAAAc,IAcb,OAbAA,EAAWN,OAAOO,OAASP,OAAOO,OAAOC,OAAS,SAAUhF,GAC1D,IAAK,IAAIiF,EAAI,EAAGA,EAAIC,UAAUhD,OAAQ+C,IAAK,CACzC,IAAIE,EAASD,UAAUD,GAEvB,IAAK,IAAItB,KAAOwB,EACVX,OAAOY,UAAUC,eAAeC,KAAKH,EAAQxB,KAC/C3D,EAAO2D,GAAOwB,EAAOxB,G,CAK3B,OAAO3D,C,EAEF8E,EAASS,MAAMC,KAAMN,U,8rCCSjBO,SAAoBlH,mBAC/B,MAYWmH,GAAkBnH,mBAC7B,MAYWoH,GAAepH,mBAAwC,CAClEqH,OAAQ,KACRC,QAAS,KChDJ,SAASC,EAAUC,EAAWC,GACnC,IAAKD,EAAM,MAAM,IAAIE,MAAMD,E,CAkGtB,SAASE,EAAazE,EAAc0E,GACzC,YADsE,IAA7BA,MAAiB,IACnD1E,EACJ1B,QADI,WACe,CAACqG,EAAGzC,KACG,MAAfwC,EAAOxC,IAAjBmC,GAAS,GACFK,EAAOxC,MAEf5D,QALI,UAKeqG,GACH,MAAfD,EAAO,KAAe,GAAKA,EAAO,KAAKpG,QAAZ,OAA4B,M,CA+BtD,SAASsG,EACdC,EACAC,EACApI,QACqB,IADrBA,MAAW,KAEX,IAGIyD,EAAW4E,GAFU,iBAAhBD,GAA2BE,eAAUF,GAAeA,GAEvB3E,UAAY,IAAKzD,GAEvD,GAAgB,MAAZyD,EACF,OAAO,KAGT,IAAI8E,EAAWC,EAAcL,IA6E/B,SAA2BI,GACzBA,EAASE,MAAK,CAACC,EAAGC,IAChBD,EAAEE,QAAUD,EAAEC,MACVD,EAAEC,MAAQF,EAAEE,MAyCpB,SAAwBF,EAAaC,GAInC,OAFED,EAAE3E,SAAW4E,EAAE5E,QAAU2E,EAAEG,MAAM,GAAG,GAAIC,OAAM,CAACC,EAAGjC,IAAMiC,IAAMJ,EAAE7B,KAO9D4B,EAAEA,EAAE3E,OAAS,GAAK4E,EAAEA,EAAE5E,OAAS,GAG/B,C,CApDEiF,CACEN,EAAEO,WAAWxC,KAAKyC,GAASA,EAAKC,gBAChCR,EAAEM,WAAWxC,KAAKyC,GAASA,EAAKC,kB,CAlFxCC,CAAkBb,GAElB,IAAIb,EAAU,KACd,IAAK,IAAIZ,EAAI,EAAc,MAAXY,GAAmBZ,EAAIyB,EAASxE,SAAU+C,EACxDY,EAAU2B,EAAiBd,EAASzB,GAAIrD,GAG1C,OAAOiE,C,CAgBT,SAASc,EACPL,EACAI,EACAe,EACAC,GA8CA,YA7Ce,IAHfhB,MAA0B,SAGX,IAFfe,MAA2B,SAEZ,IADfC,MAAa,IAEbpB,EAAOvC,SAAQ,CAAC4D,EAAOC,KACrB,IAAIP,EAAkB,CACpBQ,aAAcF,EAAMlG,MAAQ,GAC5BR,eAAuC,IAAxB0G,EAAM1G,cACrBqG,cAAeM,E,MACfD,GAGEN,EAAKQ,aAAa7F,WAAW,QAE7BqF,EAAKQ,aAAa7F,WAAW0F,IAD/B5B,GAAS,GAOTuB,EAAKQ,aAAeR,EAAKQ,aAAab,MAAMU,EAAWxF,SAGzD,IAAIT,EAAOqG,EAAU,CAACJ,EAAYL,EAAKQ,eACnCT,EAAaK,EAAY9C,OAAO0C,GAKhCM,EAAMvJ,UAAYuJ,EAAMvJ,SAAS8D,OAAS,KAE1B,IAAhByF,EAAMC,OADR9B,GAAS,GAMTa,EAAcgB,EAAMvJ,SAAUsI,EAAUU,EAAY3F,KAKpC,MAAdkG,EAAMlG,MAAiBkG,EAAMC,QAIjClB,EAASqB,KAAK,C,KAAEtG,EAAMsF,MAAOiB,EAAavG,EAAMkG,EAAMC,O,WAAQR,GAAhD,IAGTV,C,CAcT,MAAMuB,EAAO,SAMPC,EAAWC,GAAoB,MAANA,EAE/B,SAASH,EAAavG,EAAcmG,GAClC,IAAIQ,EAAW3G,EAAK4G,MAAM,KACtBC,EAAeF,EAASlG,OAS5B,OARIkG,EAASG,KAAKL,KAChBI,IAPiB,GAUfV,IACFU,GAdoB,GAiBfF,EACJ/F,QAAQ8F,IAAOD,EAAQC,KACvB1D,QACC,CAACsC,EAAOyB,IACNzB,GACCkB,EAAQQ,KAAKD,GAvBM,EAyBJ,KAAZA,EAvBc,EACC,KAyBrBF,E,CAmBN,SAASd,EACPkB,EACA9G,GAEA,IAAIwF,WAAEA,GAAesB,EAEjBC,EAAgB,GAChBC,EAAkB,IAClB/C,EAAwB,GAC5B,IAAK,IAAIZ,EAAI,EAAGA,EAAImC,EAAWlF,SAAU+C,EAAG,CAC1C,IAAIoC,EAAOD,EAAWnC,GAClB7D,EAAM6D,IAAMmC,EAAWlF,OAAS,EAChC2G,EACkB,MAApBD,EACIhH,EACAA,EAASoF,MAAM4B,EAAgB1G,SAAW,IAC5C4G,EAAQC,EACV,CAAEtH,KAAM4F,EAAKQ,aAAc5G,cAAeoG,EAAKpG,c,IAAeG,GAC9DyH,GAGF,IAAKC,EAAO,OAAO,KAEnBtE,OAAOO,OAAO4D,EAAeG,EAAM3C,QAEnC,IAAIwB,EAAQN,EAAKM,MAEjB9B,EAAQkC,KAAK,CACX5B,OAAQwC,EACR/G,SAAUkG,EAAU,CAACc,EAAiBE,EAAMlH,WAC5CoH,aAAcC,EACZnB,EAAU,CAACc,EAAiBE,EAAME,gB,MAEpCrB,IAGyB,MAAvBmB,EAAME,eACRJ,EAAkBd,EAAU,CAACc,EAAiBE,EAAME,e,CAIxD,OAAOnD,C,CAwDF,SAASkD,EAIdG,EACAtH,GAEuB,iBAAZsH,IACTA,EAAU,CAAEzH,KAAMyH,EAASjI,eAAe,EAAOG,KAAK,IAGxD,IAAK+H,EAASC,GAwChB,SACE3H,EACAR,EACAG,QACoB,IAFpBH,OAAgB,QAEI,IADpBG,OAAM,GAUN,IAAIgI,EAAuB,GACvBC,EACF,IACA5H,EACG1B,QADH,UACsB,IACnBA,QAFH,OAEmB,KAChBA,QAHH,sBAGkC,QAC/BA,QAJH,WAIsB,CAACqG,EAAWkD,KAC9BF,EAAWrB,KAAKuB,GACT,eAGT7H,EAAK8H,SAAS,MAChBH,EAAWrB,KAAK,KAChBsB,GACW,MAAT5H,GAAyB,OAATA,EACZ,QACA,qBAEN4H,GAAgBjI,EACZ,QAOA,uCAKN,MAAO,CAFO,IAAIoI,OAAOH,EAAcpI,OAAgBmB,EAAY,KAElDgH,E,CArFWK,CAC1BP,EAAQzH,KACRyH,EAAQjI,cACRiI,EAAQ9H,KAGN0H,EAAQlH,EAASkH,MAAMK,GAC3B,IAAKL,EAAO,OAAO,KAEnB,IAAIF,EAAkBE,EAAM,GACxBE,EAAeJ,EAAgB7I,QAAhB,UAAmC,MAClD2J,EAAgBZ,EAAM9B,MAAM,GAqBhC,MAAO,C,OApBcoC,EAAW3E,QAC9B,CAACC,EAAM4E,EAAW1B,KAGhB,GAAkB,MAAd0B,EAAmB,CACrB,IAAIK,EAAaD,EAAc9B,IAAU,GACzCoB,EAAeJ,EACZ5B,MAAM,EAAG4B,EAAgB1G,OAASyH,EAAWzH,QAC7CnC,QAFY,UAEO,K,CAOxB,OAJA2E,EAAK4E,GAiEX,SAAkCtF,EAAesF,GAC/C,IACE,OAAOM,mBAAmB5F,E,CAC1B,MAAO6F,GAQP,OAAO7F,C,EA5Ea8F,CAChBJ,EAAc9B,IAAU,IAGnBlD,CAAP,GAEF,IAKA9C,SAAUgH,E,aACVI,E,QACAE,E,CAwEG,SAASa,EAAY9J,EAAQ+J,QAA0B,IAA1BA,MAAe,KACjD,IACEpI,SAAUC,EADR6B,OAEFA,EAAS,GAFPuG,KAGFA,EAAO,IACS,iBAAPhK,GAAkBwG,eAAUxG,GAAMA,EAEzC2B,EAAWC,EACXA,EAAWG,WAAW,KACpBH,EAWR,SAAyBgG,EAAsBmC,GAC7C,IAAI5B,EAAW4B,EAAajK,QAAb,OAA6B,IAAIsI,MAAM,KAYtD,OAXuBR,EAAaQ,MAAM,KAEzBtE,SAASyE,IACR,OAAZA,EAEEJ,EAASlG,OAAS,GAAGkG,EAAS8B,MACb,MAAZ1B,GACTJ,EAASL,KAAKS,EAAdJ,IAIGA,EAASlG,OAAS,EAAIkG,EAAS7F,KAAK,KAAO,G,CAvB5C4H,CAAgBtI,EAAYmI,GAC9BA,EAEJ,MAAO,C,SACLpI,EACA8B,OAAQ0G,EAAgB1G,GACxBuG,KAAMI,EAAcJ,G,CAoBjB,SAASK,EACdC,EACAC,EACA7I,GAEA,IAUI8I,EAVAxK,EAAsB,iBAAVsK,GAAqB9D,eAAU8D,GAASA,EACpD1I,EAAuB,KAAV0I,GAAgC,KAAhBtK,EAAG2B,SAAkB,IAAM3B,EAAG2B,SAU/D,GAAkB,MAAdC,EACF4I,EAAO9I,MACF,CACL,IAAI+I,EAAqBF,EAAetI,OAAS,EAEjD,GAAIL,EAAWG,WAAW,MAAO,CAC/B,IAAI2I,EAAa9I,EAAWwG,MAAM,KAKlC,KAAyB,OAAlBsC,EAAW,IAChBA,EAAWC,QACXF,GAAsB,EAGxBzK,EAAG2B,SAAW+I,EAAWpI,KAAK,I,CAKhCkI,EAAOC,GAAsB,EAAIF,EAAeE,GAAsB,G,CAGxE,IAAIjJ,EAAOsI,EAAY9J,EAAIwK,GAY3B,OARE5I,GACe,MAAfA,GACAA,EAAW0H,SAAS,OACnB9H,EAAKG,SAAS2H,SAAS,OAExB9H,EAAKG,UAAY,KAGZH,C,CAYF,SAAS+E,EACd5E,EACAzD,GAEA,GAAiB,MAAbA,EAAkB,OAAOyD,EAE7B,IAAKA,EAASE,cAAcE,WAAW7D,EAAS2D,eAC9C,OAAO,KAGT,IAAI+I,EAAWjJ,EAASK,OAAO9D,EAAS+D,QACxC,OAAI2I,GAAyB,MAAbA,EAEP,KAGFjJ,EAASoF,MAAM7I,EAAS+D,SAAW,G,CAGrC,MAAM4F,EAAagD,GACxBA,EAAMvI,KAAK,KAAKxC,QAAhB,SAAkC,KAEvBkJ,EAAqBrH,GAChCA,EAAS7B,QAAT,OAAyB,IAAIA,QAA7B,OAA6C,KAEzCqK,EAAmB1G,GACtBA,GAAqB,MAAXA,EAEPA,EAAO1B,WAAW,KAClB0B,EACA,IAAMA,EAHN,GAKA2G,EAAiBJ,GACpBA,GAAiB,MAATA,EAAoBA,EAAKjI,WAAW,KAAOiI,EAAO,IAAMA,EAAzC,GCjmBnB,SAAS3J,EAAQL,IAEpB8K,KADFjF,GAAS,GAOT,IAAI3H,SAAEA,EAAFiB,UAAYA,IAAcb,gBAAiBkH,IAC3CwE,KAAEA,EAAFrI,SAAQA,EAAR8B,OAAkBA,GAAWhC,EAAgBzB,GAE7C+K,EAAiBpJ,EACrB,GAAiB,MAAbzD,EAAkB,CACpB,IAAI0D,ED0iBD,SAAuB5B,GAE5B,MAAc,KAAPA,GAAuC,KAAzBA,EAAY2B,SAC7B,IACc,iBAAP3B,GACPwG,eAAUxG,GAAI2B,SACd3B,EAAG2B,Q,CChjBYqJ,CAAchL,GAC3BiL,EAA8B,MAAdrJ,GAAsBA,EAAW0H,SAAS,KAC9DyB,EACe,MAAbpJ,EACIzD,GAAY+M,EAAgB,IAAM,IAClCpD,EAAU,CAAC3J,EAAUyD,G,CAG7B,OAAOxC,EAAU+L,WAAW,CAAEvJ,SAAUoJ,E,OAAgBtH,E,KAAQuG,G,CAQ3D,SAASc,IACd,OAA4C,OAArCxM,gBAAiBmH,E,CAanB,SAASlE,IAQd,OANEuJ,KADFjF,GAAS,IAOFvH,gBAAiBmH,GAAiB5G,Q,CASpC,SAASsM,IACd,OAAO7M,gBAAiBmH,GAAiBvG,c,CAUpC,SAASkM,EAGdnC,IAEE6B,KADFjF,GAAS,GAOT,IAAIlE,SAAEA,GAAaJ,IACnB,OAAOjD,cACL,IAAMwK,EAA0BG,EAAStH,IACzC,CAACA,EAAUsH,G,CAuBR,SAAStG,KAEZmI,KADFjF,GAAS,GAOT,IAAI3H,SAAEA,EAAFiB,UAAYA,IAAcb,gBAAiBkH,IAC3CI,QAAEA,IAAYtH,gBAAiBoH,IAC7B/D,SAAUD,GAAqBH,IAEjC8J,EAAqBC,KAAKC,UAC5B3F,EAAQjB,KAAKkE,GAAUA,EAAME,gBAG3ByC,GAAYlN,aAAa,GAsC7B,OArCAA,gBAAgB,KACdkN,EAAUjN,SAAU,CAApB,KAG+BD,kBAC/B,SAAC0B,EAAiByL,GAOhB,QAPkD,IAAlCA,MAA2B,KAOtCD,EAAUjN,QAAS,OAExB,GAAkB,iBAAPyB,EAET,YADAb,EAAUuM,GAAG1L,GAIf,IAAIwB,EAAO6I,EACTrK,EACAsL,KAAKK,MAAMN,GACX3J,GAGe,MAAbxD,IACFsD,EAAKG,SAAWkG,EAAU,CAAC3J,EAAUsD,EAAKG,aAGzC8J,EAAQ3L,QAAUX,EAAUW,QAAUX,EAAU2I,MACjDtG,EACAiK,EAAQ/M,M,GAGZ,CAACR,EAAUiB,EAAWkM,EAAoB3J,G,CAM9C,MAAMkK,GAAgBtN,mBAA6B,MAO5C,SAASuN,IACd,OAAOvN,gBAAiBsN,E,CASnB,SAASE,EAAUC,GACxB,IAAIpG,GAASrH,gBAAiBoH,GAAcC,OAC5C,OAAIA,GAEA5G,mBAACiN,EAAcC,SADjB,CAC0BlI,MAAOgI,GAAUpG,GAGtCA,C,CASF,SAASuG,IAKd,IAAItG,QAAEA,IAAYtH,gBAAiBoH,GAC/ByG,EAAavG,EAAQA,EAAQ3D,OAAS,GAC1C,OAAOkK,EAAcA,EAAWjG,OAAiB,E,CAQ5C,SAASzE,EAAgBzB,GAC9B,IAAI4F,QAAEA,IAAYtH,gBAAiBoH,IAC7B/D,SAAUD,GAAqBH,IAEjC8J,EAAqBC,KAAKC,UAC5B3F,EAAQjB,KAAKkE,GAAUA,EAAME,gBAG/B,OAAOzK,cACL,IAAM+L,EAAUrK,EAAIsL,KAAKK,MAAMN,GAAqB3J,IACpD,CAAC1B,EAAIqL,EAAoB3J,G,CAYtB,SAAS0K,EACd/F,EACAC,IAGEwE,KADFjF,GAAS,GAOT,IA4CIhH,GA5CE+G,QAASyG,IAAkB/N,gBAAiBoH,GAC9CyG,EAAaE,EAAcA,EAAcpK,OAAS,GAClDqK,EAAeH,EAAaA,EAAWjG,OAAS,GAEhDqG,GADiBJ,GAAaA,EAAWxK,SACpBwK,EAAaA,EAAWpD,aAAe,KAsC5DyD,GArCcL,GAAcA,EAAWzE,MAqCjBnG,KAG1B,GAAI+E,EAAa,KAAAmG,EACf,IAAIC,EACqB,iBAAhBpG,GAA2BE,eAAUF,GAAeA,EAGpC,MAAvBiG,KAAA,OAAAE,EACEC,EAAkB/K,eADpB,EACE8K,EAA4B1K,WAAWwK,KAF3C1G,GAAS,GASThH,EAAW6N,C,MAEX7N,EAAW2N,EAGb,IAAI7K,EAAW9C,EAAS8C,UAAY,IAKhCiE,EAAUQ,EAAYC,EAAQ,CAAE1E,SAHX,MAAvB4K,EACI5K,EACAA,EAASoF,MAAMwF,EAAmBtK,SAAW,MAiBnD,OAAO0K,EACL/G,GACEA,EAAQjB,KAAKkE,GACXtE,OAAOO,OAAO,GAAI+D,EAAO,CACvB3C,OAAQ3B,OAAOO,OAAO,GAAIwH,EAAczD,EAAM3C,QAC9CvE,SAAUkG,EAAU,CAAC0E,EAAoB1D,EAAMlH,WAC/CoH,aACyB,MAAvBF,EAAME,aACFwD,EACA1E,EAAU,CAAC0E,EAAoB1D,EAAME,mBAGjDsD,E,CAIG,SAASM,EACd/G,EACAyG,GAEA,YAD2B,IAD3BA,MAA8B,IAEf,MAAXzG,EAAwB,KAErBA,EAAQgH,aAAY,CAACjH,EAAQkD,EAAOlB,KAEvC5I,mBAAC8N,EAAaZ,SADhB,CAEI9N,cAC0BgE,IAAxB0G,EAAMnB,MAAMoF,QAAwBjE,EAAMnB,MAAMoF,QAAUnH,EAE5D5B,MAAO,C,OACL4B,EACAC,QAASyG,EAAc3H,OAAOkB,EAAQmB,MAAM,EAAGY,EAAQ,QAI5D,K,CC3WE,SAASoF,EAAT9O,GAKmC,IALbC,SAC3BA,EAD2BC,SAE3BA,EAF2B6O,eAG3BA,EAH2BC,aAI3BA,GAJ2BhP,EAMvBI,GAAaC,cACS,MAAtBD,EAAWE,UACbF,EAAWE,SAAU2O,yBAAoB,C,eAAEF,E,aAAgBC,KAG7D,IAAIxO,EAAUJ,EAAWE,SACpBG,EAAOC,IAAYL,cAAe,CACrCM,OAAQH,EAAQG,OAChBC,SAAUJ,EAAQI,WAKpB,OAFAP,sBAAsB,IAAMG,EAAQK,OAAOH,IAAW,CAACF,KAGrDM,mBAACoO,EADH,CAEIjP,SAAUA,EACVC,SAAUA,EACVU,SAAUH,EAAMG,SAChBK,eAAgBR,EAAME,OACtBO,UAAWV,G,CAoBV,SAAS2O,EAAT/N,GAA+D,IAA7CW,GAAEA,EAAFF,QAAMA,EAANpB,MAAeA,GAAfW,GAErByL,KADFjF,GAAS,GAcT,IAAInD,EAAWC,IAKf,OAJArE,gBAAgB,KACdoE,EAAS1C,EAAI,C,QAAEF,E,MAASpB,GAAxB,IAGK,I,CAYF,SAAS2O,EAAOC,GACrB,OAAOxB,EAAUwB,EAAMvB,Q,CAkClB,SAASwB,EACdC,GAEA3H,GAAS,E,CAyBJ,SAAS5G,EAATO,GAOoC,IANzCtB,SAAUuP,EAAe,IADJtP,SAErBA,EAAW,KACXU,SAAU6O,EAHWxO,eAIrBA,EAAiByO,SAAeC,IAJXzO,UAKrBA,EACA0O,OAAQC,GAAa,GANAtO,EASlBsL,KADHjF,GAAS,GAMT,IAAI3H,EAAW8K,EAAkByE,GAC7BM,GAAoBzP,cACtB,KAAO,C,SAAEJ,E,UAAUiB,EAAW0O,OAAQC,KACtC,CAAC5P,EAAUiB,EAAW2O,IAGI,iBAAjBJ,IACTA,GAAelH,eAAUkH,IAG3B,IAAI/L,SACFA,EAAW,IADT8B,OAEFA,EAAS,GAFPuG,KAGFA,EAAO,GAHLtL,MAIFA,EAAQ,KAJNgF,IAKFA,EAAM,WACJgK,EAEA7O,GAAWP,cAAc,KAC3B,IAAI0P,EAAmBzH,EAAc5E,EAAUzD,GAE/C,OAAwB,MAApB8P,EACK,KAGF,CACLrM,SAAUqM,E,OACVvK,E,KACAuG,E,MACAtL,E,IACAgF,EALF,GAOC,CAACxF,EAAUyD,EAAU8B,EAAQuG,EAAMtL,EAAOgF,IAS7C,OAAgB,MAAZ7E,EACK,MAIPE,mBAACkP,EAAkBhC,SADrB,CAC8BlI,MAAOgK,IACjChP,mBAACmP,EAAgBjC,SADnB,CAEI9N,SAAUA,EACV4F,MAAO,C,SAAElF,E,eAAUK,K,CAiBpB,SAASiP,EAATzO,GAGoC,IAHpBvB,SACrBA,EADqBU,SAErBA,GAFqBa,EAIrB,OAAO0M,EAAUgC,EAAyBjQ,GAAWU,E,CAchD,SAASuP,EACdjQ,GAEA,IAAIkI,EAAwB,GAuC5B,OArCA/H,WAAewF,QAAQ3F,GAAW2O,IAChC,KAAKxO,oBAAqBwO,GAGxB,OAGF,GAAIA,EAAQuB,OAAS/P,WAMnB,YAJA+H,EAAOyB,KAAKxC,MACVe,EACA+H,EAAyBtB,EAAQQ,MAAMnP,WAMzC2O,EAAQuB,OAASd,GADnB1H,GAAS,GAOT,IAAI6B,EAAqB,CACvB1G,cAAe8L,EAAQQ,MAAMtM,cAC7B8L,QAASA,EAAQQ,MAAMR,QACvBnF,MAAOmF,EAAQQ,MAAM3F,MACrBnG,KAAMsL,EAAQQ,MAAM9L,MAGlBsL,EAAQQ,MAAMnP,WAChBuJ,EAAMvJ,SAAWiQ,EAAyBtB,EAAQQ,MAAMnP,WAG1DkI,EAAOyB,KAAKJ,EAAZrB,IAGKA,C,CAMF,SAASiI,EACd1I,GAEA,OAAO+G,EAAe/G,E","sources":["../packages/react-router-dom/index.tsx","node_modules/@babel/runtime/helpers/esm/extends.js","../packages/react-router/lib/context.ts","../packages/react-router/lib/router.ts","../packages/react-router/lib/hooks.tsx","../packages/react-router/lib/components.tsx"],"sourcesContent":["/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type { BrowserHistory, HashHistory, History } from \"history\";\nimport { createBrowserHistory, createHashHistory } from \"history\";\nimport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  renderMatches,\n  resolvePath,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n};\n\nexport { NavigationType } from \"react-router\";\nexport type {\n  Hash,\n  Location,\n  Path,\n  To,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigator,\n  OutletProps,\n  Params,\n  PathMatch,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  Pathname,\n  Search,\n  RoutesProps,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let location = useLocation();\n    let path = useResolvedPath(to);\n\n    let locationPathname = location.pathname;\n    let toPathname = path.pathname;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp({ isActive }) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\" ? children({ isActive }) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        event.button === 0 && // Ignore everything but left clicks\n        (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // Ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here.\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(defaultInit?: URLSearchParamsInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback(\n    (\n      nextInit: URLSearchParamsInit,\n      navigateOptions?: { replace?: boolean; state?: any }\n    ) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams] as const;\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import * as React from \"react\";\nimport type { History, Location } from \"history\";\nimport { Action as NavigationType } from \"history\";\n\nimport type { RouteMatch } from \"./router\";\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n","import type { Location, Path, To } from \"history\";\nimport { parsePath } from \"history\";\n\nexport function invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nexport function warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObject;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n","import * as React from \"react\";\nimport type { Location, Path, To } from \"history\";\nimport { Action as NavigationType, parsePath } from \"history\";\n\nimport { LocationContext, NavigationContext, RouteContext } from \"./context\";\nimport type {\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n} from \"./router\";\nimport {\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  resolveTo,\n  warning,\n  warningOnce,\n} from \"./router\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase]),\n        })\n      ),\n    parentMatches\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : outlet\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1)),\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n","import * as React from \"react\";\nimport type { InitialEntry, Location, MemoryHistory, To } from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath,\n} from \"history\";\n\nimport { LocationContext, NavigationContext, Navigator } from \"./context\";\nimport {\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\nimport type { RouteMatch, RouteObject } from \"./router\";\nimport { invariant, normalizePathname, stripBasename, warning } from \"./router\";\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n"],"names":["BrowserRouter","_ref","basename","children","window","historyRef","React","current","createBrowserHistory","history","state","setState","action","location","listen","React.createElement","$fUhq7","Router","navigationType","navigator","HashRouter","_ref2","createHashHistory","HistoryRouter","_ref3","Link","_ref4","ref","onClick","reloadDocument","replace","target","to","rest","$a649fef847e92448$var$_objectWithoutPropertiesLoose","$a649fef847e92448$var$_excluded","href","useHref","internalOnClick","useLinkClickHandler","$49uSp","createElement","$a649fef847e92448$var$_extends","event","defaultPrevented","NavLink","_ref5","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","$a649fef847e92448$var$_excluded2","useLocation","path","useResolvedPath","locationPathname","pathname","toPathname","toLowerCase","isActive","startsWith","charAt","length","ariaCurrent","undefined","filter","Boolean","join","$a649fef847e92448$export$a6c7ac8248d6e38a","_temp","replaceProp","navigate","useNavigate","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","preventDefault","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","createSearchParams","searchParams","search","key","keys","has","getAll","forEach","value","append","nextInit","navigateOptions","init","URLSearchParams","Array","isArray","Object","reduce","memo","concat","map","v","$4659e375ccc50f55$export$2e2bcd8739ae039","assign","bind","i","arguments","source","prototype","hasOwnProperty","call","apply","this","NavigationContext","LocationContext","RouteContext","outlet","matches","invariant","cond","message","Error","generatePath","params","_","matchRoutes","routes","locationArg","stripBasename","parsePath","branches","flattenRoutes","sort","a","b","score","slice","every","n","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matchRouteBranch","parentsMeta","parentPath","route","index","relativePath","joinPaths","push","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","segment","test","branch","matchedParams","matchedPathname","remainingPathname","match","matchPath","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","paramName","endsWith","RegExp","compilePath","captureGroups","splatValue","decodeURIComponent","error","safelyDecodeURIComponent","resolvePath","fromPathname","hash","pop","resolvePathname","normalizeSearch","normalizeHash","resolveTo","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","nextChar","paths","useInRouterContext","joinedPathname","getToPathname","endsWithSlash","createHref","useNavigationType","useMatch","routePathnamesJson","JSON","stringify","activeRef","options","go","parse","OutletContext","useOutletContext","useOutlet","context","$b9499947b4d7b2e6$var$OutletContext","Provider","useParams","routeMatch","useRoutes","parentMatches","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","_renderMatches","reduceRight","$b9499947b4d7b2e6$export$9072aa6dd1f93057","element","MemoryRouter","initialEntries","initialIndex","createMemoryHistory","$b9499947b4d7b2e6$export$55185c17a0fcbe46","Navigate","Outlet","props","Route","_props","basenameProp","locationProp","NavigationType","Pop","static","staticProp","navigationContext","trailingPathname","$b9499947b4d7b2e6$export$26749e8557646306","$b9499947b4d7b2e6$export$c7914228fb69b0f5","Routes","createRoutesFromChildren","type","renderMatches"],"version":3,"file":"react-router-dom.15c9c6be.js.map"}